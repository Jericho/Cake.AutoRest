using System;
using Cake.Core;
using Cake.Core.Annotations;

namespace Cake.AutoRest
{
    /// <summary>
    /// Provides a wrapper around AutoRest functinoality for use in Cake scripts
    /// </summary>
    [CakeAliasCategory("AutoRest")]
    public static class AutoRestAliases
    {
        /// <summary>
        /// Get an AutoRestRunner for controlling AutoRest
        /// </summary>
        /// <param name="ctx">The script context</param>
        /// <returns></returns>
        /// <example>
        /// <para>Run with all the defaults:</para>
        /// <code>
        /// <![CDATA[
        /// Task("Use-Defaults")
        ///     .Does(() => {
        ///         AutoRest.Generate("./sample.json");
        /// });
        /// ]]></code>
        /// <para>Configure using AutoRestSettings object</para>
        /// <code>
        /// <![CDATA[
        /// Task("Settings-Object")
        /// .Does(() => {
        /// var settings = new AutoRestSettings {
        ///     Namespace = "Cake",
        ///     Generator = CodeGenerator.AzureCSharp,
        ///     ClientName = "Cake.AutoRest",
        ///     HeaderComment = "Generated by Cake.AutoRest",
        ///     OutputDirectory = "./dist/client"
        ///     };
        ///     AutoRest.Generate("./sample.json", settings);
        /// });
        /// ]]></code>
        /// <para>Configure using fluent interface (equivalent to above)</para>
        /// <code>
        /// <![CDATA[
        /// Task("Fluent-Interface")
        /// .Does(() => {
        ///     AutoRest.Generate("./sample.json", settings =>
        ///         settings.UseNamespace("Cake")
        ///             .UseClientName("Cake.AutoRest")
        ///             .AddHeaderComment("Generated by Cake.AutoRest")
        ///             .WithGenerator(CodeGenerator.AzureCSharp)
        ///             .OutputToDirectory("./dist/client"));
        /// });
        /// ]]>
        /// </code>
        /// </example>
        /// 
        [CakePropertyAlias]
        public static AutoRestRunner AutoRest(this ICakeContext ctx)
        {
            if (ctx == null) throw new ArgumentNullException(nameof(ctx));
            return new AutoRestRunner(ctx.FileSystem, ctx.Environment, ctx.ProcessRunner, ctx.Tools, ctx.Log);
        }
    }
}
